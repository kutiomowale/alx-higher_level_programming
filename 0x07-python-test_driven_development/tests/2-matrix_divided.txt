>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix
[[1, 2, 3], [4, 5, 6]]
>>> matrix_divided([[2]], 2)
[[1.0]]
>>> matrix_divided(4, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([2, 3], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[], []], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[2], 3], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[9, 6], ['6', 3]], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[4, 5], [[2, 3], 3]], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[3, 6], [9, 12, 15]], 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[3, 6], [9, 12]], '3')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[3, 6], [9, 12]])
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
>>> matrix_divided([[2, 4], [6, 8]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> matrix_divided([[0.0, 0.0], [0.0, 0.0]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]
>>> matrix_divided([[float('inf')]], float('inf'))
[[nan]]
